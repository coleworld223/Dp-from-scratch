#include<bits/stdc++.h>
using namespace std;
 
#define      ull        unsigned long long
#define      ll         long long
#define      ff         first
#define      ss         second
#define      w(t)       ll t; cin >> t; while(t--)
#define      pb         push_back
#define      fastio()   ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
/*-----------------------------------------------------------------------------------
*/
const int MOD = 1e9 + 7;
const int N = 1e5 + 5;
ll n;
vector <vector <ll>> dp(N, vector <ll> (3, -1));
vector <vector <ll>> v(N, vector <ll> (3));

ll func(ll i, ll j){
	//if we go till the ith index and we choose the 
	//jth element at the ith index what is the max sum we can obtain
	if(i == 1)return v[i][j];
	if(dp[i][j] != -1)return dp[i][j];
	ll mm = INT_MIN;
	for (ll k = 0; k < 3; k++){
		if(k == j)continue;
		mm = max(mm, 1ll * func(i - 1, k));
	}
	return dp[i][j] =  mm + v[i][j];
}
void solve(){	
	cin >> n;
	for (ll i = 1; i <= n; i++){
		for (ll j = 0; j < 3; j++){
			cin >> v[i][j];
		}
	}
	//lets try the recursion
	// cout << max(func(n, 0), max(func(n, 1), func(n, 2))) << endl;

	//lets try iteration
	for (ll i = 0; i < 3; i++){
		dp[1][i] = v[1][i];
	}

	for (ll i = 2; i <= n; i++){
		for (ll j = 0; j < 3; j++){
			//what is dp[i][j]
			ll mm = INT_MIN;
			for (ll k = 0; k < 3; k++){
				if(j == k)continue;
				mm = max(dp[i - 1][k], mm);
			}
			dp[i][j] = mm + v[i][j];
		}
	}
	cout << max(dp[n][0], max(dp[n][1], dp[n][2])) << endl;

  
}
int main(){
	fastio();
	// w(t){
	// 	solve();
	// }
	solve();
}

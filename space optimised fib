#include<bits/stdc++.h>
using namespace std;
 
#define      ll         long long
#define      ff         first
#define      ss         second
#define      w(t)       ll t; cin >> t; while(t--)
#define      pb         push_back
#define      fastio()   ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
/*-----------------------------------------------------------------------------------
*/
const int MOD = 1e9 + 7;
const int N = 1e6 + 5;

//assume a function that will return nth fib_num
//and to reduce the complexity we use memoisation

ll dp[N];
ll ct = 0;
ll fib(ll n){
	ct++;
	if(dp[n] != -1)return dp[n];
	if(n == 1)return 0;
	if(n == 2)return 1;
	return dp[n] = fib(n - 1) + fib(n - 2);
}

void solve(){	
	memset(dp, -1, sizeof(dp));
	//want to print / find the fibonacci numbers
	//either can find the whole fibonacci seq starting from 
	//1st number till the required last number


	//or we can use recursion

	//first
	ll n;
	cin >> n;
	vector <ll> fib_num(n + 1);
	fib_num[1] = 0;
	fib_num[2] = 1;
	for (ll i = 3; i <= n; i++){
		fib_num[i] = fib_num[i - 1] + fib_num[i - 2];
	}

	cout << fib(5) << endl;
	cout << fib_num[5] << endl;
	cout << ct << endl;

	//space optimised
	//at any point only two prev fib_num are required
	vector <ll> dps(2, 0);
	dps[1] = 1;
	//signifies two of starting fib_num

	for (ll i = 2; i < n; i++){
		ll x = dps[1];
		dps[1] = dps[1] + dps[0];
		dps[0] = x;
	}

	cout << dps[1] << endl;

}
int main(){
	fastio();
	w(t){
		solve();
	}
	//solve();
}

#include<bits/stdc++.h>
using namespace std;
 
#define      ull        unsigned long long
#define      ll         long long
#define      ff         first
#define      ss         second
#define      w(t)       ll t; cin >> t; while(t--)
#define      pb         push_back
#define      fastio()   ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
/*-----------------------------------------------------------------------------------
*/
const int MOD = 1e9 + 7;
const int N = 1e2 + 5;
vector <ll> wt(N);
vector <ll> val(N);
ll n, W;

//vector <vector <ll>> dp(N, vector <ll> (1e5 + 5, -1));

//func(i, v) = min wt req for making value v using at and before i
//func(i, v) = min(func(i - 1, v - val[i]) + wt[i], func(i - 1, v))
// ll func(ll i, ll v){
// 	if(i <= 0 && v > 0)return 1e18;
// 	if(v <= 0)return 0;
// 	if(dp[i][v] != -1)return dp[i][v];
// 	return dp[i][v] = min(func(i - 1, v - val[i]) + wt[i], func(i - 1, v));
// }
void solve() { 
	cin >> n >> W;
	for (ll i = 1; i <= n; i++){
		cin >> wt[i] >> val[i];
	}
	ll maxVal = 100000;
	// for (ll i = maxVal; i >= 0; i--){
	// 	if(func(n, i) <= W){
	// 		cout << i << endl;
	// 		return;
	// 	}
	// }

	//lets try the iterative version

	vector <vector <ll>> dp(N, vector <ll> (1e5 + 5));
	for (ll i = 1; i <= 1e5; i++){
		dp[0][i] = 1e18;
	}
	for (ll i = 1; i <= n; i++){
		for (ll j = 1; j <= 1e5; j++){
			if(j - val[i] >= 0){
				dp[i][j] = min(dp[i - 1][j - val[i]] + wt[i], dp[i - 1][j]);
			}
			else{
				dp[i][j] = dp[i - 1][j];
			}
		}
	}

	for (ll i = 100000; i >= 1; i--){
		if(dp[n][i] <= W){
			cout << i << endl;
			return;
		}
	}
}

int main(){
	fastio();
	// w(t){
	// 	solve();
	// }
	solve();
}
